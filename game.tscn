[gd_scene load_steps=6 format=2]

[ext_resource path="res://nk57-monospace-cd-rg.ttf" type="DynamicFontData" id=1]

[sub_resource type="DynamicFont" id=1]
use_mipmaps = true
use_filter = true
font_data = ExtResource( 1 )

[sub_resource type="Theme" id=2]
default_font = SubResource( 1 )

[sub_resource type="GDScript" id=3]
script/source = "extends Control


var grid = [[]]
var cols
var rows
var res = 30
var starting_cells = 10

var squares = true

var frame_update_sec = 0.1
var processing = false setget _processing_changed
var stop_on_draw = true

func _ready():
	populate_grid()
	update_labels_and_control_buttons()

func update_labels_and_control_buttons():
	$control_panel/vbox/processing.pressed = processing
	$control_panel/vbox/stop_on_draw.pressed = stop_on_draw
	$control_panel/vbox/time_step.value = frame_update_sec
	$control_panel/vbox/hb1/val.text = str(frame_update_sec)
	$control_panel/vbox/resolution.value = res
	$control_panel/vbox/hb2/val.text = str(res)
	$control_panel/vbox/starting_cells.value = starting_cells
	$control_panel/vbox/hb3/val.text = str(starting_cells,\"%\")


func populate_grid(clear := false):
	grid = []
	cols = int(get_viewport_rect().size.x / res)
	rows = int(get_viewport_rect().size.y / res)
	for x in range(cols):
		grid.append([])
		for y in range(rows):
			grid[x].append(false)
			if not clear:
				var alive = randi()%101 < starting_cells
				grid[x][y] = alive

var time_stamp = 0
func _process(delta):
	if not processing:
		return
	
	time_stamp += delta
	if time_stamp > frame_update_sec:
		time_stamp = 0
		generate_next_gen()

var old_grid
func generate_next_gen():
	update()
	old_grid = grid.duplicate(true)
	for x in range(cols):
		for y in range(rows):
			var alive = old_grid[x][y]
			var sum = calculate_neightbours_sum(x,y)
			
			if not old_grid[x][y] and sum == 3:
				grid[x][y] = true
			if old_grid[x][y] and (sum < 2 or sum > 3 ):
				grid[x][y] = false
	

func calculate_neightbours_sum(x,y):
	if x > cols-1 or y > rows-1:
		return
	var sum = 0
	
	for i in [-1,0,1]:
		for j in [-1,0,1]:
			if i == 0 and j == 0:
				continue
			elif x+i < 0 or x+i >= cols:
				continue
			elif y+j < 0 or y+j >= rows:
				continue
			
			sum += int(old_grid[x+i][y+j])
	
#	var top   = max (0, y-1)
#	var left  = max (0, x-1)
#	var bot   = min (y+1, rows-1)
#	var right = min (x+1, cols-1)
#
#	sum += int(old_grid[left][top])
#	sum += int(old_grid[x][top])
#	sum += int(old_grid[right][top])
#	sum += int(old_grid[left][y])
#	sum += int(old_grid[right][y])
#	sum += int(old_grid[left][bot])
#	sum += int(old_grid[x][bot])
#	sum += int(old_grid[right][bot])
	
	return sum


var mouse_pressed := false
var mouse_drawing := false
func _unhandled_input(event):
	if event is InputEventMouseButton:
		mouse_pressed = event.is_pressed()
		if mouse_pressed:
			if stop_on_draw:
				self.processing = false
			var x = int(event.position.x / res)
			var y = int(event.position.y / res)
			mouse_drawing = !bool(grid[x][y])
			grid[x][y] = mouse_drawing
			update()
	
	if event is InputEventMouseMotion and mouse_pressed:
		var x = int(event.position.x / res)
		var y = int(event.position.y / res)
		grid[x][y] = mouse_drawing
		update()

func _input(event):
	if event.is_action_pressed(\"ui_cancel\"):
		$control_panel.visible = !$control_panel.visible
	if event.is_action_pressed(\"ui_select\"):
		processing = !processing
		update_labels_and_control_buttons()

func _draw():
	for col in range(cols):
		for row in range(rows):
			if not grid:
				return
			var cell = grid[col][row]
			if cell:
				if squares:
					var cell_pos = Vector2(col , row)*res + Vector2(1,1)
					draw_rect(Rect2(cell_pos, Vector2(res-2,res-2)), Color.lightgray)
				else:
					var cell_pos = Vector2(col , row)*res + Vector2(res/2,res/2)
					draw_circle(cell_pos, res/2, Color.lightgray)



func _on_next_pressed():
	generate_next_gen()

func _on_time_Step_value_changed(value):
	frame_update_sec = value
	update_labels_and_control_buttons()

func _on_resolution_value_changed(value):
	res = value
	populate_grid()
	update()
	update_labels_and_control_buttons()

func _on_starting_cells_value_changed(value):
	starting_cells = value
	populate_grid()
	update()
	update_labels_and_control_buttons()

func _processing_changed(value):
	$control_panel/vbox/processing.pressed = value
	update_labels_and_control_buttons()

func _on_clear_pressed():
	populate_grid(true)
	update()

func _on_squares_toggled(button_pressed):
	squares = !button_pressed
	if squares: $control_panel/vbox/squares.text = \"Squares\"
	else: $control_panel/vbox/squares.text = \"Circles\"

func _on_processing_toggled(button_pressed):
	processing = button_pressed
	update_labels_and_control_buttons()

func _on_stop_on_draw_toggled(button_pressed):
	stop_on_draw = button_pressed


func _on_quit_pressed():
	get_tree().quit()

func _on_show_panel_pressed():
	$control_panel.show()

func _on_hide_panel_pressed():
	$control_panel.hide()
"

[sub_resource type="DynamicFont" id=4]
size = 30
outline_size = 1
outline_color = Color( 0.00784314, 0.290196, 0.152941, 1 )
use_mipmaps = true
use_filter = true
font_data = ExtResource( 1 )

[node name="game" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
theme = SubResource( 2 )
script = SubResource( 3 )
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="bg" type="ColorRect" parent="."]
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0.0627451, 0.0588235, 0.0588235, 1 )
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="show_panel" type="Button" parent="."]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -50.0
margin_top = 30.0
margin_right = -16.0
margin_bottom = 64.0
text = "o"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="control_panel" type="Control" parent="."]
anchor_left = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -434.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="bg2" type="ColorRect" parent="control_panel"]
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0.0509804, 0.0862745, 0.176471, 0.878431 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="vbox" type="VBoxContainer" parent="control_panel"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 16.0
margin_top = 16.0
margin_right = -16.0
margin_bottom = -16.0
__meta__ = {
"_edit_group_": true,
"_edit_use_anchors_": false
}

[node name="title" type="Label" parent="control_panel/vbox"]
margin_right = 402.0
margin_bottom = 60.0
rect_min_size = Vector2( 0, 60 )
custom_fonts/font = SubResource( 4 )
text = "The Game of Life"
align = 1
valign = 1

[node name="hide_panel" type="Button" parent="control_panel/vbox/title"]
anchor_left = 1.0
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_left = -34.0
margin_top = -17.0
margin_bottom = 17.0
text = "x"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="instructions" type="Label" parent="control_panel/vbox"]
visible = false
margin_top = 64.0
margin_right = 402.0
margin_bottom = 107.0
text = "- press Spacebar to start/stop the process
- press Escape to show/hide this menu"

[node name="sep1" type="HSeparator" parent="control_panel/vbox"]
margin_top = 64.0
margin_right = 402.0
margin_bottom = 68.0

[node name="processing" type="CheckButton" parent="control_panel/vbox"]
margin_top = 72.0
margin_right = 402.0
margin_bottom = 112.0
focus_mode = 0
enabled_focus_mode = 0
text = "processing"

[node name="next" type="Button" parent="control_panel/vbox"]
margin_top = 116.0
margin_right = 402.0
margin_bottom = 142.0
focus_mode = 0
enabled_focus_mode = 0
text = "Next tick"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="stop_on_draw" type="CheckButton" parent="control_panel/vbox"]
margin_top = 146.0
margin_right = 402.0
margin_bottom = 186.0
focus_mode = 0
enabled_focus_mode = 0
text = "stop when drawing"

[node name="clear" type="Button" parent="control_panel/vbox"]
margin_top = 190.0
margin_right = 402.0
margin_bottom = 216.0
text = "Clear canvas"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="squares" type="CheckButton" parent="control_panel/vbox"]
margin_top = 220.0
margin_right = 402.0
margin_bottom = 260.0
focus_mode = 0
enabled_focus_mode = 0
text = "circles"

[node name="sep2" type="HSeparator" parent="control_panel/vbox"]
margin_top = 264.0
margin_right = 402.0
margin_bottom = 268.0

[node name="hb1" type="HBoxContainer" parent="control_panel/vbox"]
margin_top = 272.0
margin_right = 402.0
margin_bottom = 292.0

[node name="lb" type="Label" parent="control_panel/vbox/hb1"]
margin_right = 104.0
margin_bottom = 20.0
text = "Tick duration"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="val" type="Label" parent="control_panel/vbox/hb1"]
margin_left = 108.0
margin_right = 402.0
margin_bottom = 20.0
size_flags_horizontal = 3
text = "0"
align = 2
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="time_step" type="HSlider" parent="control_panel/vbox"]
margin_top = 296.0
margin_right = 402.0
margin_bottom = 312.0
min_value = 0.01
max_value = 0.2
step = 0.01
value = 0.01
tick_count = 20
ticks_on_borders = true

[node name="hb2" type="HBoxContainer" parent="control_panel/vbox"]
margin_top = 316.0
margin_right = 402.0
margin_bottom = 336.0

[node name="lb" type="Label" parent="control_panel/vbox/hb2"]
margin_right = 80.0
margin_bottom = 20.0
text = "Resolution"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="val" type="Label" parent="control_panel/vbox/hb2"]
margin_left = 84.0
margin_right = 402.0
margin_bottom = 20.0
size_flags_horizontal = 3
text = "0"
align = 2
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="resolution" type="HSlider" parent="control_panel/vbox"]
margin_top = 340.0
margin_right = 402.0
margin_bottom = 356.0
min_value = 10.0
max_value = 50.0
step = 2.0
value = 10.0
tick_count = 5
ticks_on_borders = true

[node name="hb3" type="HBoxContainer" parent="control_panel/vbox"]
margin_top = 360.0
margin_right = 402.0
margin_bottom = 380.0

[node name="lb" type="Label" parent="control_panel/vbox/hb3"]
margin_right = 112.0
margin_bottom = 20.0
text = "Starting cells"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="val" type="Label" parent="control_panel/vbox/hb3"]
margin_left = 116.0
margin_right = 402.0
margin_bottom = 20.0
size_flags_horizontal = 3
text = "0"
align = 2
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="starting_cells" type="HSlider" parent="control_panel/vbox"]
margin_top = 384.0
margin_right = 402.0
margin_bottom = 400.0
min_value = 10.0
max_value = 60.0
value = 10.0
tick_count = 6
ticks_on_borders = true

[node name="sep3" type="HSeparator" parent="control_panel/vbox"]
margin_top = 404.0
margin_right = 402.0
margin_bottom = 408.0

[node name="notes" type="RichTextLabel" parent="control_panel/vbox"]
margin_top = 412.0
margin_right = 402.0
margin_bottom = 724.0
size_flags_vertical = 3
custom_colors/default_color = Color( 0.768627, 0.839216, 0.941176, 1 )
tab_size = 3
text = "The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.
It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input.
One interacts with the Game of Life by creating an initial configuration and observing how it evolves. It is Turing complete and can simulate a universal constructor or any other Turing machine."

[node name="quit" type="Button" parent="control_panel/vbox"]
margin_top = 728.0
margin_right = 402.0
margin_bottom = 768.0
rect_min_size = Vector2( 0, 40 )
focus_mode = 0
enabled_focus_mode = 0
text = "Quit"
[connection signal="pressed" from="show_panel" to="." method="_on_show_panel_pressed"]
[connection signal="pressed" from="control_panel/vbox/title/hide_panel" to="." method="_on_hide_panel_pressed"]
[connection signal="toggled" from="control_panel/vbox/processing" to="." method="_on_processing_toggled"]
[connection signal="pressed" from="control_panel/vbox/next" to="." method="_on_next_pressed"]
[connection signal="toggled" from="control_panel/vbox/stop_on_draw" to="." method="_on_stop_on_draw_toggled"]
[connection signal="pressed" from="control_panel/vbox/clear" to="." method="_on_clear_pressed"]
[connection signal="toggled" from="control_panel/vbox/squares" to="." method="_on_squares_toggled"]
[connection signal="value_changed" from="control_panel/vbox/time_step" to="." method="_on_time_Step_value_changed"]
[connection signal="value_changed" from="control_panel/vbox/resolution" to="." method="_on_resolution_value_changed"]
[connection signal="value_changed" from="control_panel/vbox/starting_cells" to="." method="_on_starting_cells_value_changed"]
[connection signal="pressed" from="control_panel/vbox/quit" to="." method="_on_quit_pressed"]
